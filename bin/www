#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("react-ant-admin-server:server");
var http = require("http");
var https = require("https");
var fs = require("fs");
var path = require("path");
var dotenv = require("dotenv");

/**
 * 读取环境变量配置
 */
dotenv.config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4040");
app.set("port", port);

/**
 * 定义创建 HTTP/HTTPS 服务器的函数：
 * 如果是生产环境，则使用 HTTPS 创建服务器，否则使用 HTTP 创建服务器。
 */
function createServer() {
  if (process.env.NODE_ENV === "production") {
    const options = {
      key: fs.readFileSync(
        path.join(__dirname, "../public/ssl/nonhana.site.key")
      ),
      cert: fs.readFileSync(
        path.join(__dirname, "../public/ssl/nonhana.site_bundle.pem")
      ),
    };
    return https.createServer(options, app);
  } else {
    return http.createServer(app);
  }
}
const server = createServer();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`服务器正在监听端口 ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
